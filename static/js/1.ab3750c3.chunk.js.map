{"version":3,"sources":["tonva-tools/entry/userApi.ts","tonva-tools/entry/regSuccess.tsx","tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/register.tsx","tonva-tools/entry/forget.tsx","tonva-tools/entry/login.tsx"],"names":["entry_userApi","_super","UserApi","tslib_es6","prototype","login","params","Promise","this","get","ret","_a","sent","Object","tonva_tools_user","token","user","nick","icon","register","post","net","undefined","RegSuccess","failed","_this","props","pwd","guest","ui","then","retUser","logined","render","react","header","className","onClick","loginRes","_","a","registerRes","logo","__webpack_require__","schema","name","type","required","maxLength","Register","apply","arguments","res","uiSchema","items","placeholder","label","widget","rePwd","onSubmit","context","values","form","data","country","mobile","email","setValue","clear","show","regSuccess","msg","click","replace","style","maxWidth","margin","padding","display","position","src","height","flex","fontSize","alignSelf","textAlign","onButtonClick","requiredFlag","Forget","login_logo","login_schema","login_Login","Login","username","password","un","console","log","footer","color","push","top","withBack","forget"],"mappings":"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","file":"static/js/1.ab3750c3.chunk.js","sourcesContent":["import {CenterApi} from '../net';\r\nimport {User, decodeUserToken} from '../user';\r\n//import { nav } from '../ui';\r\n\r\nexport class UserApi extends CenterApi {\r\n    async login(params: {user: string, pwd: string, guest: number}): Promise<any> {\r\n        //(params as any).device = nav.local.device.get();\r\n        let ret = await this.get('login', params);\r\n        switch (typeof ret) {\r\n            default: return;\r\n            case 'string': return decodeUserToken(ret);\r\n            case 'object':\r\n                let token = ret.token;\r\n                let user = decodeUserToken(token);\r\n                let {nick, icon} = ret;\r\n                if (nick) user.nick = nick;\r\n                if (icon) user.icon = icon;\r\n                return user;\r\n        }\r\n        // !== undefined) return decodeToken(token);\r\n    }\r\n    async register(params: {\r\n        nick:string, \r\n        user:string, \r\n        pwd:string, \r\n        country:number, \r\n        mobile:number, \r\n        email:string\r\n    }): Promise<any>\r\n    {\r\n        return await this.post('register', params);\r\n    }\r\n}\r\n\r\nconst userApi = new UserApi('tv/user/', undefined);\r\n\r\nexport default userApi;\r\n","import * as React from 'react';\r\nimport { nav, Page } from '../ui';\r\nimport userApi from './userApi';\r\nimport '../css/va-form.css';\r\n\r\nexport interface Props {\r\n    user: string;\r\n    pwd: string;\r\n}\r\n\r\nexport default class RegSuccess extends React.Component<Props, null> {\r\n    failed() {\r\n        return;\r\n    }\r\n    login() {\r\n        const {user, pwd} = this.props;\r\n        userApi\r\n            .login({user: user, pwd: pwd, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    this.failed();\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {user, pwd} = this.props;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        用户 <strong className=\"text-primary\">{user} </strong> 注册成功！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema} from '../ui';\r\nimport LoginView from './login';\r\nimport userApi from './userApi';\r\nimport RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nconst schema: Schema = [\r\n    {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'register', type: 'submit'},\r\n]\r\n\r\nexport default class Register extends React.Component {\r\n    private res: RegisterRes = resLang(registerRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            user: {placeholder: '用户名', label: '用户名'} as UiTextItem, \r\n            pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n            register: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '注册新用户'} as UiButton,\r\n        }\r\n    }\r\n        \r\n    /*\r\n    private schema:FormSchema = new FormSchema({\r\n        fields: [\r\n            {\r\n                type: 'string',\r\n                name: 'user',\r\n                placeholder: '用户名',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'pwd',\r\n                placeholder: '密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'rePwd',\r\n                placeholder: '重复密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n        ],\r\n        submitText: '注册新用户',\r\n        onSumit: this.onSubmit.bind(this),\r\n    });\r\n    */\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        /*\r\n        let user = await userApi.login({\r\n            user: values['username'], \r\n            pwd: values['password']\r\n        });\r\n        if (user === undefined) {\r\n            //this.failed();\r\n            this.schema.clear();\r\n            this.schema.errors.push('用户名或密码错！');\r\n        } else {\r\n            nav.logined(user);\r\n        }\r\n        return undefined;*/\r\n        //const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码不对，请重新输入密码！';\r\n            //this.schema.errors.push('密码不对，请重新输入密码！');\r\n            //this.schema.inputs['pwd'].clear();\r\n            //this.schema.inputs['rePwd'].clear();\r\n            //return undefined;\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n        //return undefined;\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n        //nav.replace(<RegisterView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n// <ValidForm formSchema={this.schema}  />\r\n","import * as React from 'react';\r\nimport {nav, Page} from '../ui';\r\n\r\nexport default class Forget extends React.Component<{}, null> {\r\n    render() {\r\n        return <Page header='忘记密码'>\r\n            正在设计中...\r\n        </Page>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport RegisterView from './register';\r\nimport Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport default class Login extends React.Component<{withBack?:boolean}> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '用户名', label: '用户'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    /*\r\n    private schema:FormSchema = new FormSchema({\r\n        fields: [\r\n            {\r\n                type: 'string',\r\n                name: 'username',\r\n                placeholder: '用户名',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'password',\r\n                placeholder: '密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n        ],\r\n        onSumit: this.onLoginSubmit.bind(this),\r\n    });\r\n    */\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n        if (user === undefined) return '用户名或密码错！';\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user);\r\n    }\r\n    click() {\r\n        nav.replace(<RegisterView />);\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={() => nav.push(<RegisterView />)}>\r\n                如果没有账号，请注册\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top = '同花';\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = '登录用户';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>{top}</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => nav.push(<Forget />)}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}
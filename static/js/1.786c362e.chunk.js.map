{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","_super","AccountInput","_this","apply","this","arguments","buttonDisabled","onClick","onButtonClick","context","form","props","undefined","name","tslib_es6","prototype","onChange","evt","target","value","trim","length","render","ref","input","inputType","defaultValue","placeholder","readOnly","disabled","onKeyDown","onFocus","onBlur","maxLength","itemSchema","renderErrors","mobx_module","widgets","RegisterController","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","internalStart","openVPage","register_AccountPage","toVerify","account","register_VerifyPage","toPassword","register_PasswordPage","toSuccess","register_RegSuccess","login","userApi","user","pwd","password","guest","ui","then","retUser","alert","logined","_a","sent","regReturn","registerReturn","msg","checkAccount","Promise","isExists","ret","error","accountError","setVerify","execute","params","nick","country","mobile","email","verify","register","clear","register_ForgetController","ForgetController","resetPassword","AccountPage","schema","required","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onSubmit","requiredFlag","clearContextErrors","getValue","sender","setError","open","items","widget","label","openPage","VerifyPage","onVerifyChanged","prev","setDisabled","onChanged","submit","checkVerify","typeText","extra","PasswordPage","values","data","rePwd","setValue","RegSuccess","login_Login","Login","username","console","log","token","callback","clickReg","start","clickForget","top","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.786c362e.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n        <span className=\"text-danger\">花</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: /^[0-9]*$/},\r\n    {type:'email', caption:'邮箱', regex: /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'verify', type: 'string', required: true, maxLength: 6} as StringSchema,\r\n        //{name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n            \r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\nexport default class Register extends React.Component {\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='账号注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n*/","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\n//import Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top:any;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = <>登录账号</>;\r\n        }\r\n        else {\r\n            top = tonvaTop;\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {top}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => this.clickForget()}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}
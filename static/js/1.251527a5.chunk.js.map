{"version":3,"sources":["tonva-tools/entry/userApi.ts","tonva-tools/entry/regSuccess.tsx","tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/register.tsx","tonva-tools/entry/forget.tsx","tonva-tools/entry/login.tsx"],"names":["entry_userApi","net","[object Object]","params","ret","this","get","Object","tonva_tools_user","token","user","nick","icon","post","undefined","regSuccess_RegSuccess","react","pwd","props","login","guest","ui","then","retUser","tslib_es6","logined","failed","header","className","onClick","loginRes","_","a","registerRes","logo","__webpack_require__","schema","name","type","required","maxLength","register_Register","res","uiSchema","items","placeholder","label","widget","rePwd","register","context","msg","values","form","data","country","mobile","email","setValue","clear","show","replace","login_Login","style","maxWidth","margin","padding","display","position","src","height","flex","fontSize","alignSelf","textAlign","onButtonClick","onSubmit","requiredFlag","forget_Forget","login_logo","login_schema","username","password","un","console","log","footer","color","push","top","withBack"],"mappings":"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","file":"static/js/1.251527a5.chunk.js","sourcesContent":["import {CenterApi} from '../net';\r\nimport {User, decodeUserToken} from '../user';\r\n//import { nav } from '../ui';\r\n\r\nexport class UserApi extends CenterApi {\r\n    async login(params: {user: string, pwd: string, guest: number}): Promise<any> {\r\n        //(params as any).device = nav.local.device.get();\r\n        let ret = await this.get('login', params);\r\n        switch (typeof ret) {\r\n            default: return;\r\n            case 'string': return decodeUserToken(ret);\r\n            case 'object':\r\n                let token = ret.token;\r\n                let user = decodeUserToken(token);\r\n                let {nick, icon} = ret;\r\n                if (nick) user.nick = nick;\r\n                if (icon) user.icon = icon;\r\n                return user;\r\n        }\r\n        // !== undefined) return decodeToken(token);\r\n    }\r\n    async register(params: {\r\n        nick:string, \r\n        user:string, \r\n        pwd:string, \r\n        country:number, \r\n        mobile:number, \r\n        email:string\r\n    }): Promise<any>\r\n    {\r\n        return await this.post('register', params);\r\n    }\r\n}\r\n\r\nconst userApi = new UserApi('tv/user/', undefined);\r\n\r\nexport default userApi;\r\n","import * as React from 'react';\r\nimport { nav, Page } from '../ui';\r\nimport userApi from './userApi';\r\nimport '../css/va-form.css';\r\n\r\nexport interface Props {\r\n    user: string;\r\n    pwd: string;\r\n}\r\n\r\nexport default class RegSuccess extends React.Component<Props, null> {\r\n    failed() {\r\n        return;\r\n    }\r\n    login() {\r\n        const {user, pwd} = this.props;\r\n        userApi\r\n            .login({user: user, pwd: pwd, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    this.failed();\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {user, pwd} = this.props;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        用户 <strong className=\"text-primary\">{user} </strong> 注册成功！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema} from '../ui';\r\nimport LoginView from './login';\r\nimport userApi from './userApi';\r\nimport RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nconst schema: Schema = [\r\n    {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'register', type: 'submit'},\r\n]\r\n\r\nexport default class Register extends React.Component {\r\n    private res: RegisterRes = resLang(registerRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            user: {placeholder: '用户名', label: '用户名'} as UiTextItem, \r\n            pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n            register: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '注册新用户'} as UiButton,\r\n        }\r\n    }\r\n        \r\n    /*\r\n    private schema:FormSchema = new FormSchema({\r\n        fields: [\r\n            {\r\n                type: 'string',\r\n                name: 'user',\r\n                placeholder: '用户名',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'pwd',\r\n                placeholder: '密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'rePwd',\r\n                placeholder: '重复密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n        ],\r\n        submitText: '注册新用户',\r\n        onSumit: this.onSubmit.bind(this),\r\n    });\r\n    */\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        /*\r\n        let user = await userApi.login({\r\n            user: values['username'], \r\n            pwd: values['password']\r\n        });\r\n        if (user === undefined) {\r\n            //this.failed();\r\n            this.schema.clear();\r\n            this.schema.errors.push('用户名或密码错！');\r\n        } else {\r\n            nav.logined(user);\r\n        }\r\n        return undefined;*/\r\n        //const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码不对，请重新输入密码！';\r\n            //this.schema.errors.push('密码不对，请重新输入密码！');\r\n            //this.schema.inputs['pwd'].clear();\r\n            //this.schema.inputs['rePwd'].clear();\r\n            //return undefined;\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n        //return undefined;\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n        //nav.replace(<RegisterView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n// <ValidForm formSchema={this.schema}  />\r\n","import * as React from 'react';\r\nimport {nav, Page} from '../ui';\r\n\r\nexport default class Forget extends React.Component<{}, null> {\r\n    render() {\r\n        return <Page header='忘记密码'>\r\n            正在设计中...\r\n        </Page>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport RegisterView from './register';\r\nimport Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport default class Login extends React.Component<{withBack?:boolean}> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '用户名', label: '用户'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    /*\r\n    private schema:FormSchema = new FormSchema({\r\n        fields: [\r\n            {\r\n                type: 'string',\r\n                name: 'username',\r\n                placeholder: '用户名',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n            {\r\n                type: 'password',\r\n                name: 'password',\r\n                placeholder: '密码',\r\n                rules: ['required', 'maxlength:100']\r\n            },\r\n        ],\r\n        onSumit: this.onLoginSubmit.bind(this),\r\n    });\r\n    */\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n        if (user === undefined) return '用户名或密码错！';\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user);\r\n    }\r\n    click() {\r\n        nav.replace(<RegisterView />);\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={() => nav.push(<RegisterView />)}>\r\n                如果没有账号，请注册\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top = '同花';\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = '登录用户';\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>{top}</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => nav.push(<Forget />)}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}
{"version":3,"sources":["tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","type","caption","regex","getSender","un","find","v","test","register_RegisterController","_super","RegisterController","_this","apply","this","arguments","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","tslib_es6","prototype","internalStart","openVPage","register_AccountPage","toVerify","account","register_VerifyPage","toPassword","register_PasswordPage","toSuccess","register_RegSuccess","login","userApi","user","pwd","password","guest","ui","then","retUser","undefined","alert","logined","_a","sent","regReturn","registerReturn","msg","checkAccount","Promise","isExists","ret","error","accountError","setVerify","execute","params","nick","country","mobile","email","verify","register","clear","register_ForgetController","ForgetController","resetPassword","AccountPage","schema","name","required","maxLength","res","Object","page","header","controller","style","marginLeft","marginRight","uiSchema","onButtonClick","onSubmit","onEnter","requiredFlag","context","clearContextErrors","value","getValue","sender","setError","length","open","items","widget","label","placeholder","openPage","VerifyPage","onVerifyChanged","prev","setDisabled","onChanged","submit","disabled","checkVerify","typeText","extra","PasswordPage","values","form","data","rePwd","setValue","RegSuccess","onClick","login_Login","Login","username","console","log","token","props","callback","clickReg","start","clickForget","render","footer","color","margin","withBack","top"],"mappings":"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","file":"static/js/1.0efcc567.chunk.js","sourcesContent":["import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n        <span className=\"text-danger\">花</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\n\r\nconst mobileRegex = /^[0-9]*$/;\r\nconst emailRegex = /\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*/;\r\n// /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: mobileRegex},\r\n    {type:'email', caption:'邮箱', regex: emailRegex}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n/*\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n*/\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n\r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter} \r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'user') {\r\n            return await this.onSubmit('verify', context);\r\n        }\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'verify') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} \r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'rePwd') {\r\n            return await this.onSubmit('submit', context);\r\n        }\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit}\r\n                    onEnter={this.onEnter}\r\n                    requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from '../user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>;\r\n    top?: any;\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem,\r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un,\r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private onEnter = async (name:string, context:Context):Promise<string> => {\r\n        if (name === 'password') {\r\n            return await this.onSubmit('login', context);\r\n        }\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n        }\r\n        let {top} = this.props;\r\n        if (top === undefined) top = tonvaTop;\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"d-flex h-100 flex-column justify-content-center align-items-center\">\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"w-20c\">\r\n                    {top}\r\n                    <div className=\"h-2c\" />\r\n                    <Form schema={schema} uiSchema={this.uiSchema} \r\n                        onButtonClick={this.onSubmit} \r\n                        onEnter={this.onEnter}\r\n                        requiredFlag={false} />\r\n                    <button className=\"btn btn-link btn-block\"\r\n                        onClick={() => this.clickForget()}>\r\n                        忘记密码\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex-fill\" />\r\n                <div className=\"flex-fill\" />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}
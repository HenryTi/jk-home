{"version":3,"sources":["tonva-tools/entry/userApi.ts","tonva-tools/entry/res/login.ts","tonva-tools/entry/res/register.ts","tonva-tools/entry/tools.tsx","tonva-tools/entry/register.tsx","tonva-tools/entry/login.tsx"],"names":["entry_userApi","_super","UserApi","tslib_es6","prototype","login","params","Promise","this","get","ret","_a","sent","Object","tonva_tools_user","token","user","nick","icon","register","post","setVerify","account","type","checkVerify","verify","isExists","resetPassword","password","net","undefined","loginRes","_","a","registerRes","logo","__webpack_require__","tonvaTop","react","className","src","senders","caption","regex","getSender","un","find","v","test","register_RegisterController","AccountInput","_this","apply","arguments","buttonDisabled","onClick","onButtonClick","context","form","props","name","onChange","evt","target","value","trim","length","render","ref","input","inputType","defaultValue","placeholder","readOnly","disabled","onKeyDown","onFocus","onBlur","maxLength","itemSchema","renderErrors","mobx_module","widgets","RegisterController","accountPageCaption","accountLabel","accountSubmitCaption","passwordPageCaption","passwordSubmitCaption","successText","internalStart","openVPage","register_AccountPage","toVerify","register_VerifyPage","toPassword","register_PasswordPage","toSuccess","register_RegSuccess","pwd","guest","ui","then","retUser","alert","logined","regReturn","registerReturn","msg","checkAccount","error","accountError","execute","country","mobile","email","clear","register_ForgetController","ForgetController","AccountPage","schema","required","res","page","header","controller","style","marginLeft","marginRight","uiSchema","onSubmit","requiredFlag","clearContextErrors","getValue","sender","setError","open","items","widget","label","openPage","VerifyPage","onVerifyChanged","prev","setDisabled","onChanged","submit","typeText","extra","PasswordPage","values","data","rePwd","setValue","RegSuccess","login_Login","Login","username","console","log","callback","clickReg","start","clickForget","top","footer","color","margin","withBack"],"mappings":"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","file":"static/js/1.1313ac55.chunk.js","sourcesContent":["import {CenterApi} from '../net';\r\nimport {User, decodeUserToken} from '../user';\r\n//import { nav } from '../ui';\r\n\r\nexport class UserApi extends CenterApi {\r\n    async login(params: {user: string, pwd: string, guest: number}): Promise<any> {\r\n        //(params as any).device = nav.local.device.get();\r\n        let ret = await this.get('login', params);\r\n        switch (typeof ret) {\r\n            default: return;\r\n            case 'string': return decodeUserToken(ret);\r\n            case 'object':\r\n                let token = ret.token;\r\n                let user = decodeUserToken(token);\r\n                let {nick, icon} = ret;\r\n                if (nick) user.nick = nick;\r\n                if (icon) user.icon = icon;\r\n                return user;\r\n        }\r\n        // !== undefined) return decodeToken(token);\r\n    }\r\n    async register(params: {\r\n        nick:string, \r\n        user:string, \r\n        pwd:string,\r\n        country:number, \r\n        mobile:number, \r\n        email:string,\r\n        verify:string,\r\n    }): Promise<any>\r\n    {\r\n        return await this.post('register', params);\r\n    }\r\n\r\n    async setVerify(account:string, type:'mobile'|'email') {\r\n        return await this.post('set-verify', {account:account, type:type});\r\n    }\r\n\r\n    async checkVerify(account:string, verify:string) {\r\n        return await this.post('check-verify', {account:account, verify:verify});\r\n    }\r\n\r\n    async isExists(account:string) {\r\n        return await this.get('is-exists', {account:account});\r\n    }\r\n\r\n    async resetPassword(account:string, password:string, verify:string, type:'mobile'|'email') {\r\n        return await this.post('reset-password', {account:account, password, verify, type});\r\n    }\r\n}\r\n\r\nconst userApi = new UserApi('tv/user/', undefined);\r\n\r\nexport default userApi;\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface LoginRes {\r\n    a: string;\r\n}\r\n\r\nexport const loginRes: Res<LoginRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import { Res } from \"../../ui\";\r\n\r\nexport interface RegisterRes {\r\n    a: string;\r\n}\r\n\r\nexport const registerRes: Res<RegisterRes> = {\r\n    _: {\r\n        a: 'd',\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nconst logo = require('../img/logo.svg');\r\n\r\nexport const tonvaTop = <div className=\"d-flex align-items-center\">\r\n    <img className=\"App-logo h-3c position-absolute\" src={logo} />\r\n    <div className=\"h3 flex-fill text-center\"><span className=\"text-primary mr-3\">同</span>\r\n        <span className=\"text-danger\">花</span>\r\n    </div>\r\n</div>;\r\n\r\ninterface Sender {\r\n    type: string;\r\n    caption: string;\r\n    regex: RegExp;\r\n}\r\nconst senders:Sender[] = [\r\n    {type:'mobile', caption:'手机号', regex: /^[0-9]*$/},\r\n    {type:'email', caption:'邮箱', regex: /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/}\r\n];\r\n\r\nexport function getSender(un: string):Sender {\r\n    let sender = senders.find(v => v.regex.test(un) === true);\r\n    return sender;\r\n}","import * as React from 'react';\r\nimport {nav, Page, Schema, UiSchema, UiTextItem, UiPasswordItem, UiButton, Form, Context, resLang, StringSchema, Controller, VPage, UiCustom, UiInputItem, NumSchema, View} from '../ui';\r\n//import LoginView from './login';\r\nimport userApi from './userApi';\r\n//import RegSuccess from './regSuccess';\r\nimport '../css/va-form.css';\r\nimport { RegisterRes, registerRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { Widget, NumberWidget, TextWidget } from '../ui/form/widgets';\r\nimport { observable } from 'mobx';\r\n//const logo = require('../img/logo.svg');\r\n\r\nexport interface Values {\r\n    user: string;\r\n    pwd: string;\r\n    rePwd: string;\r\n    country?: string;\r\n    mobile?: string;\r\n    email?: string;\r\n}\r\n\r\nclass AccountInput extends TextWidget {\r\n    @observable private buttonDisabled: boolean = true;\r\n    private onClick = () => {\r\n        let {onButtonClick} = this.context.form.props;\r\n        if (onButtonClick === undefined) return;\r\n        onButtonClick(this.name, this.context);\r\n    }\r\n    protected onChange(evt: React.ChangeEvent<any>) {\r\n        this.buttonDisabled = (evt.target.value.trim().length === 0);\r\n    }\r\n    render() {\r\n        return <>\r\n            <div className=\"input-group\">\r\n                <input ref={input=>this.input = input}\r\n                            className=\"form-control\"\r\n                            type={this.inputType}\r\n                            defaultValue={this.value}\r\n                            onChange={(evt: React.ChangeEvent<any>) => this.onChange(evt)}\r\n                            placeholder='手机号/邮箱'\r\n                            readOnly={this.readOnly}\r\n                            disabled={this.disabled}\r\n                            onKeyDown = {this.onKeyDown}\r\n                            onFocus = {(evt: React.FocusEvent<any>) => this.onFocus(evt)}\r\n                            onBlur={(evt: React.FocusEvent<any>) => this.onBlur(evt)}\r\n                            maxLength={(this.itemSchema as StringSchema).maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-sm btn-outline-primary\"\r\n                        type=\"button\" disabled={this.buttonDisabled}\r\n                        onClick={this.onClick}>\r\n                        <small>发送验证码</small>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {this.renderErrors()}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport class RegisterController extends Controller {\r\n    account: string;\r\n    type:'mobile'|'email';\r\n    password: string;\r\n    verify: string;\r\n\r\n    accountPageCaption = '账号密码';\r\n    accountLabel = '注册账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '账号密码';\r\n    passwordSubmitCaption = '注册新账号'; \r\n    successText = '注册成功';\r\n\r\n    protected async internalStart() {\r\n        this.openVPage(AccountPage);\r\n    }\r\n\r\n    toVerify(account:string) {\r\n        this.account = account;\r\n        this.openVPage(VerifyPage);\r\n    }\r\n\r\n    toPassword() {\r\n        this.openVPage(PasswordPage);\r\n    }\r\n\r\n    toSuccess() {\r\n        this.openVPage(RegSuccess);\r\n    }\r\n\r\n    login() {\r\n        userApi\r\n            .login({user: this.account, pwd: this.password, guest: nav.guest})\r\n            .then(async retUser => {\r\n                if (retUser === undefined) {\r\n                    alert('something wrong!');\r\n                    return;\r\n                }\r\n                await nav.logined(retUser);\r\n            });\r\n    }\r\n\r\n    regReturn(registerReturn:number):string {\r\n        let msg:any;\r\n        switch (registerReturn) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + this.account;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + this.account;\r\n                break;\r\n            case 3:\r\n                msg = '邮箱 ' + this.account;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n\r\n    async checkAccount():Promise<string> {\r\n        let ret = await userApi.isExists(this.account);\r\n        let error = this.accountError(ret);\r\n        if (error !== undefined) return error;\r\n        ret = await userApi.setVerify(this.account, this.type);\r\n        this.toVerify(this.account);\r\n        return;\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists > 0) return '已经被注册使用了';\r\n    }\r\n\r\n    async execute() {\r\n        let params = {\r\n            nick: undefined,\r\n            user: this.account, \r\n            pwd: this.password,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n            verify: this.verify\r\n        }\r\n        switch (this.type) {\r\n            case 'mobile': params.mobile = this.account; break;\r\n            case 'email': params.email = this.account; break;\r\n        }\r\n        let ret = await userApi.register(params);\r\n        if (ret === 0) {\r\n            nav.clear();\r\n            this.toSuccess();\r\n            return;\r\n        }\r\n        return this.regReturn(ret);\r\n    }\r\n}\r\n\r\nexport class ForgetController extends RegisterController {\r\n    accountPageCaption = '密码找回';\r\n    accountLabel = '账号';\r\n    accountSubmitCaption = '注册新账号'; \r\n    passwordPageCaption = '重置密码';\r\n    passwordSubmitCaption = '提交'; \r\n    successText = '成功修改密码';\r\n\r\n    async execute() {\r\n        let ret = await userApi.resetPassword(this.account, this.password, this.verify, this.type);\r\n        nav.clear();\r\n        this.toSuccess();\r\n        return undefined;\r\n        //return this.regReturn(ret);\r\n    }\r\n\r\n    protected accountError(isExists: number) {\r\n        if (isExists === 0) return '请输入正确的账号';\r\n    }\r\n}\r\n\r\nclass AccountPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'user', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'verify', type: 'string', required: true, maxLength: 6} as StringSchema,\r\n        //{name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        //{name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'verify', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n            \r\n    protected res: RegisterRes = resLang(registerRes);\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                user: {\r\n                    widget: 'text',\r\n                    label: this.controller.accountLabel,\r\n                    placeholder: '手机号或邮箱',\r\n                } as UiTextItem, \r\n                verify: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '发送验证码'} as UiButton,\r\n            }\r\n        }\r\n                \r\n            this.openPage(this.page);\r\n    }\r\n\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.accountPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {tonvaTop}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        context.clearContextErrors();\r\n        let user = 'user';\r\n        let value = context.getValue(user);\r\n        let sender = getSender(value);\r\n        if (sender === undefined) {\r\n            context.setError(user, '必须是手机号或邮箱');\r\n            return;\r\n        }\r\n        let type:'mobile'|'email' = sender.type as 'mobile'|'email';\r\n        if (type === 'mobile') {\r\n            if (value.length !== 11 || value[0] !== '1') {\r\n                context.setError(user, '请输入正确的手机号');\r\n                return;\r\n            }\r\n        }\r\n        this.controller.account = value;\r\n        this.controller.type = type;\r\n        let ret = await this.controller.checkAccount();\r\n        if (ret !== undefined) context.setError(user, ret);\r\n    }\r\n}\r\n\r\nclass VerifyPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'verify', type: 'number', required: true, maxLength: 6} as NumSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n\r\n    private onVerifyChanged = (context:Context, value:any, prev:any) => {\r\n        context.setDisabled('submit', !value || (value.length != 6));\r\n    }\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            verify: {\r\n                widget: 'text',\r\n                label: '验证码',\r\n                placeholder: '请输入验证码',\r\n                onChanged: this.onVerifyChanged,\r\n            } as UiTextItem, \r\n            submit: {\r\n                widget: 'button', \r\n                className: 'btn btn-primary btn-block mt-3', \r\n                label: '下一步 >',\r\n                disabled: true\r\n            } as UiButton,\r\n        }\r\n    }\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let verify = this.controller.verify = context.getValue('verify');\r\n        let ret = await userApi.checkVerify(this.controller.account, verify);\r\n        if (ret === 0) {\r\n            context.setError('verify', '验证码错误');\r\n            return;\r\n        }\r\n        this.controller.toPassword();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        let typeText:string, extra:any;\r\n        switch (this.controller.type) {\r\n            case 'mobile': typeText = '手机号'; break;\r\n            case 'email': \r\n                typeText = '邮箱'; \r\n                extra = <><span className=\"text-danger\">注意</span>: 有可能误为垃圾邮件，请检查<br/></>;\r\n                break;\r\n        }\r\n        return <Page header=\"验证码\">\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                验证码已经发送到{typeText}<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                {extra}\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema} \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass PasswordPage extends VPage<RegisterController> {\r\n    private schema: Schema = [\r\n        {name: 'pwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'rePwd', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n        {name: 'submit', type: 'submit'},\r\n    ]\r\n    private uiSchema: UiSchema;\r\n    async open() {\r\n        this.uiSchema = {\r\n            items: {\r\n                pwd: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n                rePwd: {widget: 'password', placeholder: '重复密码', label: '重复密码'} as UiPasswordItem,\r\n                submit: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: this.controller.passwordSubmitCaption} as UiButton,\r\n            }\r\n        }\r\n        this.openPage(this.page);\r\n    }\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let {pwd, rePwd} = values;\r\n        if (!pwd || pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        this.controller.password = pwd;\r\n        return await this.controller.execute();\r\n    }\r\n    private page = ():JSX.Element => {\r\n        return <Page header={this.controller.passwordPageCaption}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                注册账号<br/>\r\n                <div className=\"py-2 px-3 my-2 text-primary bg-light\"><b>{this.controller.account}</b></div>\r\n                <div className=\"h-1c\" />\r\n                <Form schema={this.schema} uiSchema={this.uiSchema}                    \r\n                    onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>\r\n    }\r\n}\r\n\r\nclass RegSuccess extends VPage<RegisterController> {\r\n    async open() {\r\n        this.openPage(this.page);\r\n    }\r\n\r\n    private page = () => {\r\n        const {account, successText} = this.controller;\r\n        return (\r\n        <Page header={false}>\r\n            <div className=\"container w-max-30c\">\r\n                <form className=\"my-5\">\r\n                    <div className=\"py-5\">\r\n                        账号 <strong className=\"text-primary\">{account} </strong> {successText}！\r\n                    </div>\r\n                    <button className=\"btn btn-success btn-block\" onClick={() => this.controller.login()}>\r\n                        直接登录\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Page>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\nexport default class Register extends React.Component {\r\n    async onSubmit(name:string, context:Context):Promise<string> {\r\n        let values = context.form.data;\r\n        let {user, pwd, rePwd, country, mobile, email} = values;\r\n        if (pwd !== rePwd) {\r\n            context.setValue('pwd', '');\r\n            context.setValue('rePwd', '');\r\n            return '密码错误，请重新输入密码！';\r\n        }\r\n        let ret = await userApi.register({\r\n            nick: undefined,\r\n            user: user, \r\n            pwd: pwd,\r\n            country: undefined,\r\n            mobile: undefined,\r\n            email: undefined,\r\n        });\r\n        let msg:any;\r\n        switch (ret) {\r\n            default: throw 'unknown return';\r\n            case 0:\r\n                nav.clear();\r\n                nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                return;\r\n            case 1:\r\n                msg = '用户名 ' + user;\r\n                break;\r\n            case 2:\r\n                msg = '手机号 +' + country + ' ' + mobile;\r\n                break;\r\n            case 3:\r\n                msg = '电子邮件 ' + email;\r\n                break;\r\n        }\r\n        return msg + ' 已经被注册过了';\r\n    }\r\n    click() {\r\n        nav.replace(<LoginView />);\r\n    }\r\n\r\n    render() {\r\n        return <Page header='账号注册'>\r\n            <div style={{\r\n                maxWidth:'25em',\r\n                margin: '3em auto',\r\n                padding: '0 3em',\r\n            }}>\r\n                <div className='container' style={{display:'flex', position:'relative'}}>\r\n                    <img className='App-logo' src={logo} style={{height:'60px', position:'absolute'}}/>\r\n                    <span style={{flex:1,\r\n                        fontSize: 'x-large',\r\n                        alignSelf: 'center',\r\n                        textAlign: 'center',\r\n                        margin: '10px',\r\n                    }}>同花</span>\r\n                </div>\r\n                <div style={{height:'20px'}} />\r\n                <Form schema={schema} uiSchema={uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n*/","import * as React from 'react';\r\nimport {nav, Page, Form, Schema, UiSchema, UiTextItem, UiPasswordItem, Context, UiButton, resLang, StringSchema} from '../ui';\r\nimport { RegisterController, ForgetController } from './register';\r\n//import Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { LoginRes, loginRes } from './res';\r\nimport { tonvaTop, getSender } from './tools';\r\nimport { User } from 'tonva-tools/user';\r\n\r\nconst schema: Schema = [\r\n    {name: 'username', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'password', type: 'string', required: true, maxLength: 100} as StringSchema,\r\n    {name: 'login', type: 'submit'},\r\n];\r\n\r\nexport interface LoginProps {\r\n    withBack?: boolean;\r\n    callback?: (user:User) => Promise<void>\r\n}\r\n\r\nexport default class Login extends React.Component<LoginProps> {\r\n    private res: LoginRes = resLang(loginRes);\r\n    private uiSchema: UiSchema = {\r\n        items: {\r\n            username: {placeholder: '手机/邮箱/用户名', label: '登录账号'} as UiTextItem, \r\n            password: {widget: 'password', placeholder: '密码', label: '密码'} as UiPasswordItem,\r\n            login: {widget: 'button', className: 'btn btn-primary btn-block mt-3', label: '登录'} as UiButton,\r\n        }\r\n    }\r\n    \r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values = context.form.data;\r\n        let un = values['username'];\r\n        let pwd = values['password'];\r\n        if (pwd === undefined) {\r\n            return 'something wrong, pwd is undefined';\r\n        }\r\n        let user = await userApi.login({\r\n            user: un, \r\n            pwd: pwd,\r\n            guest: nav.guest,\r\n        });\r\n\r\n        if (user === undefined) {\r\n            let sender = getSender(un);\r\n            let type:string = sender !== undefined? sender.caption : '用户名';\r\n            return type + '或密码错！';\r\n        }\r\n        console.log(\"onLoginSubmit: user=%s pwd:%s\", user.name, user.token);\r\n        await nav.logined(user, this.props.callback);\r\n    }\r\n    private clickReg = () => {\r\n        //nav.replace(<RegisterView />);\r\n        let register = new RegisterController(undefined);\r\n        register.start();\r\n    }\r\n    private clickForget = () => {\r\n        let forget = new ForgetController(undefined);\r\n        forget.start();\r\n    }\r\n    render() {\r\n        let footer = <div className='text-center'>\r\n            <button className=\"btn btn-link\" color=\"link\" style={{margin:'0px auto'}}\r\n                onClick={this.clickReg}>\r\n                注册账号\r\n            </button>\r\n        </div>;\r\n        let header:string|boolean|JSX.Element = false;\r\n        let top:any;\r\n        if (this.props.withBack === true) {\r\n            header = '登录';\r\n            top = <>登录账号</>;\r\n        }\r\n        else {\r\n            top = tonvaTop;\r\n        }\r\n        return <Page header={header} footer={footer}>\r\n            <div className=\"w-max-20c my-5 py-5\"\r\n                style={{marginLeft:'auto', marginRight:'auto'}}>\r\n                {top}\r\n                <div className=\"h-3c\" />\r\n                <Form schema={schema} uiSchema={this.uiSchema} onButtonClick={this.onSubmit} requiredFlag={false} />\r\n                <button className=\"btn btn-link btn-block\"\r\n                    onClick={() => this.clickForget()}>\r\n                    忘记密码\r\n                </button>\r\n            </div>\r\n        </Page>;\r\n    }\r\n}\r\n"],"sourceRoot":""}
{"version":3,"sources":["me/about.tsx","me/center.ts","me/changePassword.tsx","me/tab.tsx"],"names":["about_About","_super","About","_this","apply","this","arguments","showLogs","tonva_tools","push","react","header","logs","map","v","i","key","className","tslib_es6","prototype","render","right","onClick","me_center","Center","changePassword","param","post","_a","sent","undefined","schema","name","type","required","uiSchema","items","orgPassword","widget","label","maxLength","placeholder","newPassword","newPassword1","submit","ChangePasswordPage","onSubmit","context","Promise","values","form","data","setValue","replace","back","requiredFlag","onButtonClick","tab_Me","Me","about","exit","confirm","logout","rows","user","aboutRows","component","dist","iconClass","icon","text","logOutRows","bk","size","showLogin","consts","appIcon","main","discription","String","id","concat","__webpack_exports__"],"mappings":"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","file":"static/js/2.fd1063b6.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Page, nav } from 'tonva-tools';\r\n\r\nexport class About extends React.Component {\r\n    private showLogs = () => {\r\n        nav.push(<Page header=\"Logs\">\r\n            <div>NODE_ENV: {process.env.NODE_ENV}</div>\r\n            {nav.logs.map((v,i) => {\r\n                return <div key={i} className=\"px-3 py-1\">{v}</div>;\r\n            })}\r\n        </Page>);\r\n    }\r\n\r\n    render() {\r\n        let right = <button className='btn btn-success btn-sm' onClick={this.showLogs}>log</button>;\r\n        return <Page header=\"关于同花\" right={right}>\r\n            <div className='m-3'>\r\n                同花\r\n            </div>\r\n        </Page>;\r\n    }\r\n}","import {CenterApi, User} from 'tonva-tools';\r\n\r\nclass Center extends CenterApi {\r\n    async changePassword(param: {orgPassword:string, newPassword:string}) {\r\n        return await this.post('tie/reset-password', param);\r\n    }\r\n}\r\n\r\nconst center = new Center('tv/', undefined);\r\nexport default center;","import * as React from 'react';\r\nimport {Page, nav, Form, Context, Schema, UiSchema, UiPasswordItem} from 'tonva-tools';\r\nimport center from './center';\r\n\r\nconst schema: Schema = [\r\n    {name:'orgPassword', type: 'string', required: true},\r\n    {name:'newPassword', type: 'string', required: true},\r\n    {name:'newPassword1', type: 'string', required: true},\r\n    {name: 'submit', type: 'submit'},\r\n];\r\n\r\nconst uiSchema: UiSchema = {\r\n    items: {\r\n        orgPassword: {\r\n            widget: 'password',\r\n            label: '原密码',\r\n            maxLength: 60,\r\n            placeholder: '输入原来的密码'\r\n        } as UiPasswordItem,\r\n        newPassword: {\r\n            widget: 'password',\r\n            label: '新密码',\r\n            maxLength: 60,\r\n            placeholder: '输入新设的密码'\r\n        } as UiPasswordItem,\r\n        newPassword1: {\r\n            widget: 'password',\r\n            label: '确认密码',\r\n            maxLength: 60,\r\n            placeholder: '再次输入新设密码'\r\n        } as UiPasswordItem,\r\n        submit: {\r\n            widget: 'button',\r\n            className: 'btn btn-primary',\r\n            label: '提交'\r\n        }\r\n    }\r\n}\r\n\r\nexport default class ChangePasswordPage extends React.Component {\r\n    private onSubmit = async (name:string, context:Context):Promise<string> => {\r\n        let values:any = context.form.data;\r\n        let {orgPassword, newPassword, newPassword1} = values;\r\n        if (newPassword !== newPassword1) {\r\n            context.setValue('newPassword', '');\r\n            context.setValue('newPassword1', '');\r\n            return '新密码错误，请重新输入';\r\n        }\r\n        let ret = await center.changePassword({orgPassword: orgPassword, newPassword:newPassword});\r\n        if (ret === false) {\r\n            context.setValue('orgPassword', '');\r\n            return '原密码错误';\r\n        }\r\n        nav.replace(<Page header=\"修改密码\" back=\"close\">\r\n            <div className=\"m-3  text-success\">\r\n                密码修改成功！\r\n            </div>\r\n        </Page>);\r\n        return;\r\n    }\r\n    render() {\r\n        return <Page header=\"修改密码\">\r\n            <Form className=\"m-3\"\r\n                schema={schema} uiSchema={uiSchema}\r\n                requiredFlag={false}\r\n                onButtonClick={this.onSubmit} />\r\n        </Page>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\n//import {Media, PropGrid, Prop, FA, IconText, TonvaForm, FormRow, SubmitResult, Fields} from 'tonva-react-form';\r\nimport {nav, User, Page} from 'tonva-tools';\r\nimport {Prop, Media, IconText, FA, PropGrid} from 'tonva-react-form';\r\n//import {store} from 'store';\r\nimport { consts } from '../home/consts';\r\n//import mainApi from 'mainApi';\r\nimport {About} from './about';\r\nimport ChangePasswordPage from './changePassword';\r\n\r\nclass Me extends React.Component {\r\n    private exit() {\r\n        if (confirm('退出当前账号不会删除任何历史数据，下次登录依然可以使用本账号')) {\r\n            nav.logout();\r\n        }\r\n    }\r\n\r\n    private about = () => nav.push(<About />);\r\n\r\n    private changePassword = () => {\r\n        nav.push(<ChangePasswordPage />);\r\n    }\r\n    render() {\r\n        const {user} = nav;\r\n        let aboutRows:Prop[] = [\r\n            '',\r\n            {\r\n                type: 'component',\r\n                component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"关于同花\" />,\r\n                onClick: this.about\r\n            },\r\n            '',\r\n        ];\r\n\r\n        let logOutRows:Prop[] = [\r\n            '',\r\n            {\r\n                type: 'component',\r\n                bk: '',\r\n                component: <button className=\"btn btn-danger w-100\" onClick={this.exit}>\r\n                    <FA name=\"sign-out\" size=\"lg\" /> 退出登录\r\n                </button>\r\n            },\r\n        ];\r\n        let rows:Prop[];\r\n        if (user === undefined) {\r\n            rows = aboutRows;\r\n            rows.push('');\r\n            rows.push(\r\n                {\r\n                    type: 'component',\r\n                    component: <button className=\"btn btn-success w-100\" onClick={() => nav.showLogin(true)}>\r\n                        <FA name=\"sign-out\" size=\"lg\" /> 请登录\r\n                    </button>\r\n                },\r\n            );\r\n        }\r\n        else {\r\n            rows = [\r\n                '',\r\n                {\r\n                    type: 'component',\r\n                    component: <Media icon={consts.appIcon} main={user.name} discription={String(user.id)} />\r\n                },\r\n                '',\r\n                {\r\n                    type: 'component',\r\n                    component: <IconText iconClass=\"text-info\" icon=\"envelope\" text=\"修改密码\" />,\r\n                    onClick: this.changePassword\r\n                },\r\n            ]\r\n            rows.push(...aboutRows, ...logOutRows);\r\n        }\r\n        return <PropGrid rows={rows} values={{}} />;\r\n    }\r\n}\r\n\r\nexport default Me;"],"sourceRoot":""}